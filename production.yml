version: '3'
volumes:
  dbdata:
  acme:
networks:
  web:
services:
  db:
    image: mongo
    command: --smallfiles
    networks:
      - web
    volumes:
      - dbdata:/data/db
    deploy:
      placement:
        constraints: [node.role == worker]
      restart_policy:
        condition: on-failure
  web:
    image: registry.gitlab.com/codingfriend/feathers-vue:latest
    networks:
      - web
    env_file:
      - environment.env
    depends_on:
      - db
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 15s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.docker.network=web"
        - "traefik.port=80"
        - "traefik.enable=true"
        - "traefik.frontend.rule=PathPrefix:/;"
        - "traefik.frontend.rule=Host:${LETS_ENCRYPT_DOMAIN};"
        - "traefik.backend.loadbalancer.sticky=true"
  loadbalancer:
    image: traefik
    command: --docker \
      --docker.swarmmode \
      --docker.watch \
      --web \
      --defaultEntryPoints='http,https' \
      --entryPoints='Name:http Address::80' \
      --entryPoints='Name:https Address::443 TLS' \
      --docker.exposedbydefault=false \
      --acme \
      --acme.entryPoint='https' \
      --acme.email=${LETS_ENCRYPT_EMAIL} \
      --acme.ondemand=false \
      --acme.acmelogging=true \
      --acme.onhostrule=true \
      --acme.storage='/etc/traefik/acme/acme.json'
      --loglevel=DEBUG
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - acme:/etc/traefik/acme
    deploy:
      restart_policy:
        condition: any
      mode: replicated
      replicas: 1
      update_config:
        delay: 2s
      placement:
         constraints: [node.role == manager]
    networks:
      - web
    depends_on:
      - web
