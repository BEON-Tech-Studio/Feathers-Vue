cache:
  key: "${CI_BUILD_REF_NAME} node:8-alpine"
  paths:
  - node_modules/

stages:
  - build
  - test
  - release
  - deploy

build:
  stage: build
  image: node:8-alpine
  variables:
    NODE_ENV: "development"
  before_script:
    - apk add --update bash
    - apk add --update git && rm -rf /tmp/* /var/cache/apk/*
    - npm install
  script:
    - npm run build
  artifacts:
    paths:
     - server/
     - public/

test:
  stage: test
  image: node:8-alpine
  variables:
    DATABASE_TEST_URL: "mongodb://mongo/FeathersVueTest"
    NODE_ENV: "test"
  services:
    - mongo
  script:
    - npm run mocha

release:
  stage: release
  image: docker:latest
  only:
    - "feathers-2"
    - "master"
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: "overlay"

  before_script:
    - apk update
    - apk upgrade
    - apk add python python-dev py-pip build-base curl
    - curl -L https://github.com/docker/compose/releases/download/1.15.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - pip install docker-compose

    - docker version
    - docker-compose version
    - "docker info"
    - "docker login -u $CI_REGISTRY_USER -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest -f Dockerfile-production ."
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest"
  after_script:
    - "docker logout ${CI_REGISTRY}"

deploy:
  stage: deploy
  image: gitlab/dind:latest
  only:
    - "feathers-2"
    - "master"
  environment: production
  services:
    - docker:dind
  before_script:
   # - apt-get update -y && apt-get install sshpass
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh
   - ssh-keyscan -p 22 -H $DEPLOYMENT_SERVER_IP >> ~/.ssh/known_hosts
   - echo $PRIVATE_KEY > ~/.ssh/gitlab-ci
   - echo $PUBLIC_KEY > ~/.ssh/gitlab-ci.pub
  script:
    - printf "DATABASE_URL=${DATABASE_URL}\nPORT=80\n" > environment.env
    - scp -i ~/.ssh/gitlab-ci ./environment.env ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_IP}:~/
    - scp -i ~/.ssh/gitlab-ci ./docker-compose.autodeploy.yml ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_IP}:~/
    - ssh -i ~/.ssh/gitlab-ci $DEPLOYMENT_SERVER_USER@$DEPLOYMENT_SERVER_IP "echo ${DEPLOYMENT_SERVER_PASS} | sudo -S docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}; sudo docker-compose -f docker-compose.autodeploy.yml stop; sudo docker-compose -f docker-compose.autodeploy.yml rm --force; sudo docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest; sudo docker-compose -f docker-compose.autodeploy.yml up -d"
    # - sshpass -p "${DEPLOYMENT_SERVER_PASS}" scp -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ./environment.env ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_IP}:~/

    # - sshpass -p "${DEPLOYMENT_SERVER_PASS}" scp -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no ./docker-compose.autodeploy.yml ${DEPLOYMENT_SERVER_USER}@${DEPLOYMENT_SERVER_IP}:~/

    # - sshpass -p $DEPLOYMENT_SERVER_PASS ssh -o StrictHostKeyChecking=no -o PreferredAuthentications=password -o PubkeyAuthentication=no $DEPLOYMENT_SERVER_USER@$DEPLOYMENT_SERVER_IP "echo ${DEPLOYMENT_SERVER_PASS} | sudo -S docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}; sudo docker-compose -f docker-compose.autodeploy.yml stop; sudo docker-compose -f docker-compose.autodeploy.yml rm --force; sudo docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest; sudo docker-compose -f docker-compose.autodeploy.yml up -d"