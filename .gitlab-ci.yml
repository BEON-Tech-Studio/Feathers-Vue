cache:
  key: "$CI_BUILD_REF_NAME"
  paths:
  - node_modules/

stages:
  - build
  - test
  - release
  - deploy

build:
  stage: build
  image: node:latest
  before_script:
    - npm install
  script:
    - npm run build
  artifacts:
    paths:
     - server/
     - public/

test:
  stage: test
  image: node:latest
  variables:
    DATABASE_URL: "mongodb://mongo/FeathersVueTest"
    NODE_ENV: "test"
  services:
    - mongo
  script:
    - npm run mocha

release:
  stage: release
  image: docker:latest
  only:
    - "feathers-2"
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: "overlay"

  before_script:
    - apk add --update python py-pip python-dev && pip install docker-compose # install docker-compose
    - docker version
    - docker-compose version
    - "docker info"
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest --pull ."
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest"
  after_script:
    - "docker logout ${CI_REGISTRY}"

deploy:
  stage: deploy
  image: gitlab/dind:latest
  only:
    - "feathers-2"
  environment: production
  before_script:
   - apt-get update -y && apt-get install sshpass
  script:
    - printf "DATABASE_URL=${DATABASE_URL}\nPORT=80\n" > environment.env
    - sshpass -p "${DEPLOYMENT_SERVER_PASS}" scp -o StrictHostKeyChecking=no ./environment.env root@${DEPLOYMENT_SERVER_IP}:/home
    - sshpass -p "${DEPLOYMENT_SERVER_PASS}" scp -o StrictHostKeyChecking=no ./docker-compose.yml root@${DEPLOYMENT_SERVER_IP}:/home
    - "./deploy.sh $DEPLOYMENT_SERVER_PASS $DEPLOYMENT_SERVER_IP $CI_BUILD_TOKEN $CI_REGISTRY $CI_PROJECT_PATH"
    # - sshpass -p "${DEPLOYMENT_SERVER_PASS}" ssh root@${DEPLOYMENT_SERVER_IP} 'echo $HOME'